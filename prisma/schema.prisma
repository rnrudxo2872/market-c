// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id             Int             @id @default(autoincrement())
  phone          String?         @unique
  email          String?         @unique
  name           String
  avatar         String?
  token          Token?
  products       Product[]
  likes          ProductLike[]
  communityPosts CommunityPost[]
  wonders        Wonder[]
  answers        Answer[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Token {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  content   String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          Int           @id @default(autoincrement())
  name        String
  description String        @db.MediumText
  image       String
  price       Int
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  like        ProductLike[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model ProductLike {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CommunityPost {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  content   String   @db.MediumText
  wonder    Wonder[]
  answer    Answer[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wonder {
  id              Int           @id @default(autoincrement())
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  communityPost   CommunityPost @relation(fields: [communityPostId], references: [id], onDelete: Cascade)
  communityPostId Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Answer {
  id              Int           @id @default(autoincrement())
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  communityPost   CommunityPost @relation(fields: [communityPostId], references: [id], onDelete: Cascade)
  communityPostId Int
  content         String        @db.MediumText
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}
